{"dependencies":[{"name":"../constants","loc":{"line":3,"column":36}},{"name":"../Methods/dashedLine","loc":{"line":2,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require(\"../constants\");\n\nvar constants = _interopRequireWildcard(_constants);\n\nvar _dashedLine = require(\"../Methods/dashedLine\");\n\nvar _dashedLine2 = _interopRequireDefault(_dashedLine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nconst width = constants.width;\nconst height = constants.height;\n\nconst top = 0.43;\nconst bottom = 0.58;\n\nconst yellowLineSpacing = 45;\nconst yellowLineStrokWeight = 3;\n\nclass road {\n  constructor() {\n    this.startLeft = { x: 0, y: height * top };\n    this.endLeft = { x: width / 2 - width * 0.1, y: height * top };\n\n    this.startRight = { x: width / 2 + width * 0.1, y: height * top };\n    this.endRight = { x: width, y: height * top };\n  }\n\n  show() {\n    p5.fill(_constants.roadColor);\n    p5.stroke('black');\n    p5.strokeWeight(1);\n    p5.rect(this.startLeft.x, this.startLeft.y, width * _constants.leftRoad, height * bottom - height * top);\n    p5.rect(this.startRight.x, this.startRight.y, width * _constants.leftRoad, height * bottom - height * top);\n\n    p5.strokeWeight(3);\n    p5.stroke('white');\n\n    var line = new _dashedLine2.default(this.startLeft.x, height / 2 + 3, this.endLeft.x, height / 2 + 3, 10, 5);\n    line.show();\n\n    var line = new _dashedLine2.default(this.startRight.x, height / 2 + 3, this.endRight.x, height / 2 + 3, 10, 5);\n    line.show();\n\n    p5.stroke('#FEFE00');\n    //Top yellow line  (LEFT SIDE)\n    p5.line(this.startLeft.x, height / 2 - yellowLineSpacing + yellowLineStrokWeight, this.endLeft.x, height / 2 - yellowLineSpacing + yellowLineStrokWeight);\n    //Bottom yellow line (LEFT SIDE)\n    p5.line(this.startLeft.x, height / 2 + yellowLineSpacing + yellowLineStrokWeight, this.endLeft.x, height / 2 + yellowLineSpacing);\n\n    //Right side \n    //Top Yellow line\n    p5.line(this.startRight.x, height / 2 - yellowLineSpacing + yellowLineStrokWeight, this.endRight.x, height / 2 - yellowLineSpacing + yellowLineStrokWeight);\n    p5.line(this.startRight.x, height / 2 + yellowLineSpacing + yellowLineStrokWeight, this.endRight.x, height / 2 + yellowLineSpacing + yellowLineStrokWeight);\n\n    p5.strokeWeight(4);\n\n    if (bridgeCarSignal) {\n      p5.stroke('red');\n    } else {\n      p5.stroke('green');\n    }\n\n    //vertical signal line\n    p5.line(this.endLeft.x - 20, height * top, this.endLeft.x - 20, height * bottom);\n    p5.line(this.startRight.x + 20, height * top, this.startRight.x + 20, height * bottom);\n\n    p5.stroke('black');\n    p5.strokeWeight(1);\n\n    //road Piller 1 \n    piller(width * 0.1);\n    piller(width * 0.3);\n    piller(width * 0.7);\n    piller(width * 0.9);\n  }\n\n}\n\nexports.default = road; //Make a piller at perticular point\n\nfunction piller(strPiller) {\n  p5.fill('#404040');\n  p5.beginShape();\n  p5.vertex(strPiller, height * bottom);\n  p5.vertex(strPiller + 15, height * bottom + 30);\n  p5.vertex(strPiller + 15, height * bottom + 60);\n  p5.vertex(strPiller + 35, height * bottom + 60);\n  p5.vertex(strPiller + 35, height * bottom + 30);\n  p5.vertex(strPiller + 50, height * bottom);\n  p5.endShape(p5.CLOSE);\n}"},"hash":"8dad56ef257fd42206bec33ae906fb80"}