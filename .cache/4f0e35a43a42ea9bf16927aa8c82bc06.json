{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst width = 1000;\nconst height = 700;\n\nconst top = 0.43;\nconst bottom = 0.58;\n\nconst maxOpenHeight = 50;\nconst maxOpenWidth = 25;\n\nclass bridge {\n\n  constructor() {\n    this.leftPos = {\n      topLeft: { x: width / 2 - width * 0.1, y: height * top },\n      bottomLeft: { x: width / 2 - width * 0.1, y: height * bottom },\n      topRight: { x: width / 2, y: height * top },\n      bottomRight: { x: width / 2, y: height * bottom }\n    };\n    this.rightPos = {\n      topLeft: { x: width / 2, y: height * top },\n      bottomLeft: { x: width / 2, y: height * bottom },\n      topRight: { x: width / 2 + width * 0.1, y: height * top },\n      bottomRight: { x: width / 2 + width * 0.1, y: height * bottom }\n    };\n  }\n\n  show() {\n\n    p5.fill('#666666');\n    p5.beginShape();\n    p5.vertex(this.leftPos.topLeft.x, this.leftPos.topLeft.y);\n    p5.vertex(this.leftPos.bottomLeft.x, this.leftPos.bottomLeft.y);\n    p5.vertex(this.leftPos.bottomRight.x, this.leftPos.bottomRight.y);\n    p5.vertex(this.leftPos.topRight.x, this.leftPos.topRight.y);\n    p5.endShape(p5.CLOSE);\n\n    p5.fill('#666666');\n    p5.beginShape();\n    p5.vertex(this.rightPos.topLeft.x, this.rightPos.topLeft.y);\n    p5.vertex(this.rightPos.bottomLeft.x, this.rightPos.bottomLeft.y);\n    p5.vertex(this.rightPos.bottomRight.x, this.rightPos.bottomRight.y);\n    p5.vertex(this.rightPos.topRight.x, this.rightPos.topRight.y);\n    p5.endShape(p5.CLOSE);\n\n    p5.strokeWeight(3);\n    p5.stroke('white');\n    dashedLine(this.leftPos.topLeft.x, height / 2 + 3, this.leftPos.topRight.x, height / 2 + 3);\n    p5.strokeWeight(1);\n  }\n\n  update() {\n    //brodgeOpen global variable\n    if (bridgeOpen && this.leftPos.topRight.y >= height * top - maxOpenHeight) {\n\n      //Left side \n      this.leftPos.topRight.y -= 0.5;\n      this.leftPos.bottomRight.y -= 0.5;\n      this.leftPos.topRight.x -= 0.25;\n      this.leftPos.bottomRight.x -= 0.25;\n\n      //Right side \n      this.rightPos.topLeft.y -= 0.5;\n      this.rightPos.bottomLeft.y -= 0.5;\n      this.rightPos.topLeft.x += 0.25;\n      this.rightPos.bottomLeft.x += 0.25;\n    } else {}\n\n    if (bridgeClose && this.leftPos.topRight.y <= height * top - maxOpenHeight) {}\n  }\n}\nexports.default = bridge;"},"hash":"c4173961db7c672ce5f0bc763837dd79"}