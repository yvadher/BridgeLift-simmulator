{"dependencies":[{"name":"../constants","loc":{"line":2,"column":27}},{"name":"../Methods/dashedLine","loc":{"line":3,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require(\"../constants\");\n\nvar constants = _interopRequireWildcard(_constants);\n\nvar _dashedLine = require(\"../Methods/dashedLine\");\n\nvar _dashedLine2 = _interopRequireDefault(_dashedLine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nconst width = constants.width;\nconst height = constants.height;\n\nconst top = 0.43;\nconst bottom = 0.58;\n\nconst maxOpenHeight = 50;\nconst maxOpenWidth = 25;\n\nconst roadColor = constants.roadColor;\n\nconst speed = constants.speedAnim / 10;\n\nclass bridge {\n\n  constructor() {\n    this.leftPos = {\n      topLeft: { x: width / 2 - width * 0.1, y: height * top },\n      bottomLeft: { x: width / 2 - width * 0.1, y: height * bottom },\n      topRight: { x: width / 2, y: height * top },\n      bottomRight: { x: width / 2, y: height * bottom }\n    };\n    this.rightPos = {\n      topLeft: { x: width / 2, y: height * top },\n      bottomLeft: { x: width / 2, y: height * bottom },\n      topRight: { x: width / 2 + width * 0.1, y: height * top },\n      bottomRight: { x: width / 2 + width * 0.1, y: height * bottom }\n    };\n  }\n\n  show() {\n\n    p5.fill(roadColor);\n    p5.beginShape();\n    p5.vertex(this.leftPos.topLeft.x, this.leftPos.topLeft.y);\n    p5.vertex(this.leftPos.bottomLeft.x, this.leftPos.bottomLeft.y);\n    p5.vertex(this.leftPos.bottomRight.x, this.leftPos.bottomRight.y);\n    p5.vertex(this.leftPos.topRight.x, this.leftPos.topRight.y);\n    p5.endShape(p5.CLOSE);\n\n    p5.fill(roadColor);\n    p5.beginShape();\n    p5.vertex(this.rightPos.topLeft.x, this.rightPos.topLeft.y);\n    p5.vertex(this.rightPos.bottomLeft.x, this.rightPos.bottomLeft.y);\n    p5.vertex(this.rightPos.bottomRight.x, this.rightPos.bottomRight.y);\n    p5.vertex(this.rightPos.topRight.x, this.rightPos.topRight.y);\n    p5.endShape(p5.CLOSE);\n\n    p5.strokeWeight(3);\n    p5.stroke('white');\n    //Draw dashed line\n    var middlePoint = (this.leftPos.bottomLeft.y - this.leftPos.topLeft.y) / 2;\n    var leftDasshedLine = new _dashedLine2.default(width / 2 - width * 0.1, this.leftPos.topLeft.y + middlePoint, this.leftPos.topRight.x, this.leftPos.topRight.y + middlePoint, 10, 5);\n\n    leftDasshedLine.show();\n\n    var rightDasshedLine = new _dashedLine2.default(this.rightPos.topLeft.x, this.rightPos.topLeft.y + middlePoint, this.rightPos.topRight.x, this.rightPos.topRight.y + middlePoint, 10, 5);\n    rightDasshedLine.show();\n\n    p5.strokeWeight(1);\n  }\n\n  update() {\n\n    if (T2Passed) {\n      bridgeOpen = true;\n      B1Passed = false;\n    }\n\n    if (B1Passed) {\n      bridgeOpen = false;\n    }\n    //brodgeOpen global variable\n    if (bridgeOpen && this.leftPos.topRight.y >= height * top - maxOpenHeight) {\n\n      //Left side \n      this.leftPos.topRight.y -= speed;\n      this.leftPos.bottomRight.y -= speed;\n      this.leftPos.topRight.x -= speed / 2;\n      this.leftPos.bottomRight.x -= speed / 2;\n\n      //Right side \n      this.rightPos.topLeft.y -= speed;\n      this.rightPos.bottomLeft.y -= speed;\n      this.rightPos.topLeft.x += speed / 2;\n      this.rightPos.bottomLeft.x += speed / 2;\n    } else if (!bridgeOpen && this.leftPos.topRight.y != this.leftPos.topLeft.y) {\n\n      //Close bridge\n      //Left side \n      this.leftPos.topRight.y += speed;\n      this.leftPos.bottomRight.y += speed;\n      this.leftPos.topRight.x += speed / 2;\n      this.leftPos.bottomRight.x += speed / 2;\n\n      //Right side \n      this.rightPos.topLeft.y += speed;\n      this.rightPos.bottomLeft.y += speed;\n      this.rightPos.topLeft.x -= speed / 2;\n      this.rightPos.bottomLeft.x -= speed / 2;\n    }\n  }\n}\nexports.default = bridge;"},"hash":"951897750128c031732ff6045d326617"}