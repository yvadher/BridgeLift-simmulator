{"dependencies":[{"name":"../constants","loc":{"line":1,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require(\"../constants\");\n\nclass dashedLine {\n  constructor(x1, y1, x2, y2, lineWidth, gape) {\n    this.startPoint = { x: x1, y: y1 };\n    this.endPoint = { x: x2, y: y2 };\n    this.lineWidth = lineWidth;\n    this.gape = gape;\n  }\n  show() {\n    let dist = p5.dist(this.startPoint.x, this.startPoint.y, this.endPoint.x, this.endPoint.y);\n    let numberOfLines = dist / (this.lineWidth + this.gape);\n    // angle in radians\n    let angleRadians = Math.atan2(this.endPoint.y - this.startPoint.y, this.endPoint.x - this.startPoint.x);\n\n    if (this.startPoint.y != this.endPoint.y) {\n      let y = this.startPoint.y;\n\n      //For end point high than start point \n      if (this.startPoint.y < this.endPoint.y) {\n        for (let x = this.startPoint.x; x < this.endPoint.x; x += dist / numberOfLines) {\n          p5.line(x, y, x + this.lineWidth * Math.cos(angleRadians), y + this.lineWidth * Math.sin(angleRadians));\n          y += dist / numberOfLines - this.gape;\n        }\n      } else if (this.startPoint.y > this.endPoint.y) {\n        for (let x = this.startPoint.x; x < this.endPoint.x; x += dist / numberOfLines) {\n          p5.line(x, y, x + this.lineWidth * Math.cos(angleRadians), y + this.lineWidth * Math.sin(angleRadians));\n          y -= dist / numberOfLines - this.gape;\n        }\n      }\n    }\n  }\n\n}\nexports.default = dashedLine;"},"hash":"e70788c4479fa5542ffd99259bb5b7e3"}